{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nlet svgInput;\nlet svgOutput;\nlet canvasElement;\nlet isCopiedToClipboard = false;\nfunction copy() {\n    canvasElement.toBlob((blob) => {\n        let data = [new ClipboardItem({ [blob.type]: blob })];\n        navigator.clipboard.write(data).then(() => isCopiedToClipboard = true);\n    }, 'image/png');\n}\nfunction adjustSVG(svgStr) {\n    const container = document.createElement('div');\n    container.innerHTML = svgStr;\n    const svgEl = container.firstElementChild;\n    svgEl.setAttribute('width', '600');\n    svgEl.setAttribute('height', '600');\n    svgEl.setAttribute('viewBox', '0 0 600 600');\n    svgEl.querySelector('g').removeAttribute('transform');\n    return new XMLSerializer().serializeToString(svgEl);\n}\nfunction drawImage(svgStr) {\n    return new Promise((resolve) => {\n        const ctx = canvasElement.getContext('2d');\n        ctx.clearRect(0, 0, 600, 600);\n        const img = new Image();\n        const svgBlob = new Blob([svgStr], { type: \"image/svg+xml;charset=utf-8\" });\n        const imgUrl = URL.createObjectURL(svgBlob);\n        img.onload = function () {\n            ctx.drawImage(img, 0, 0);\n            resolve();\n        };\n        img.src = imgUrl;\n    });\n}\nfunction convert(e) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        e.preventDefault();\n        const svgPattern = /data:image\\/svg\\+xml;base64,([\\w+=]+)/;\n        const base64str = (_a = svgInput.match(svgPattern)) === null || _a === void 0 ? void 0 : _a[1];\n        if (!base64str) {\n            throw new Error('Unable to find SVG base64 string');\n        }\n        const rawSvgStr = atob(base64str);\n        const svgStr = adjustSVG(rawSvgStr);\n        svgOutput = svgStr;\n        yield drawImage(svgStr);\n        copy();\n    });\n}\n</script>\n\n<main>\n  <header>\n    <h1>svg2png</h1>\n    <p>Takes a SVG string and converts to transparent PNG</p>\n  </header>\n  <section>\n    <form>\n      <textarea bind:value={svgInput} placeholder=\"Paste SVG base64 URL here:\n<div style='background-image: data:image/svg+xml;base64,...'>\ndata:image/svg+xml;base64,...\"></textarea>\n      <button on:click={convert}>Convert</button>\n      {#if isCopiedToClipboard}\n        <span>Image copied!</span>\n      {/if}\n    </form>\n  </section>\n  <section>\n    {#if svgOutput}\n      <header><h2>PNG</h2></header>\n    {/if}\n    <canvas bind:this={canvasElement} width=\"600px\" height=\"600px\"></canvas>\n  </section>\n  {#if svgOutput}\n    <section>\n      <header><h2>SVG</h2></header>\n      {@html svgOutput}\n    </section>\n  {/if}\n</main>\n\n<style>\ntextarea {\n  width: 30rem;\n  height: 10rem;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AA4FA,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACf,CAAC"
}